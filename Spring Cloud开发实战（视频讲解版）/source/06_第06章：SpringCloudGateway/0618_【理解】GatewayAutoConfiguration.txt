1、
package org.springframework.cloud.gateway.config;
@Configuration(proxyBeanMethods = false)
// 如果要想让此配置类生效，应该在配置文件之中提供有“spring.cloud.gateway.enabled”配置项，若没有为true
@ConditionalOnProperty(name = "spring.cloud.gateway.enabled", matchIfMissing = true)
@EnableConfigurationProperties // 注入一些相关的属性内容
@AutoConfigureBefore({ HttpHandlerAutoConfiguration.class, // HTTP处理类
      WebFluxAutoConfiguration.class }) // 配置WebFlux处理类
// 处理完成之后还需要提供有相关的Bean对象
@AutoConfigureAfter({ GatewayLoadBalancerClientAutoConfiguration.class,
      GatewayClassPathWarningAutoConfiguration.class })
@ConditionalOnClass(DispatcherHandler.class) // 分发的处理
public class GatewayAutoConfiguration {
   @Bean
   public StringToZonedDateTimeConverter stringToZonedDateTimeConverter() {
      return new StringToZonedDateTimeConverter();// 字符串与日期时间转换处理
   }
   @Bean
   public RouteLocatorBuilder routeLocatorBuilder(// 路由定位器构建器
         ConfigurableApplicationContext context) {
      return new RouteLocatorBuilder(context);
   }
   @Bean
   @ConditionalOnMissingBean
   public PropertiesRouteDefinitionLocator propertiesRouteDefinitionLocator(
         GatewayProperties properties) { // 提供有相关的路由的配置属性
      return new PropertiesRouteDefinitionLocator(properties);
   }
// 面试题：SpringCloudGateway之中所有的路由信息保存在什么位置？
// 回答：所有的路由信息保存在网关的内存之中，这样可以快速读取配置；
   @Bean
   @ConditionalOnMissingBean(RouteDefinitionRepository.class)
   public InMemoryRouteDefinitionRepository inMemoryRouteDefinitionRepository() {
      return new InMemoryRouteDefinitionRepository();// 在内存中保存路由的定义存储
   }
   @Bean
   @Primary
   public RouteDefinitionLocator routeDefinitionLocator(
         List<RouteDefinitionLocator> routeDefinitionLocators) {
      return new CompositeRouteDefinitionLocator(
            Flux.fromIterable(routeDefinitionLocators));
   }
   @Bean
   public ConfigurationService gatewayConfigurationService(BeanFactory beanFactory,
         @Qualifier("webFluxConversionService") ObjectProvider<ConversionService> conversionService,
         ObjectProvider<Validator> validator) {
      return new ConfigurationService(beanFactory, conversionService, validator);
   }
   @Bean
   public RouteLocator routeDefinitionRouteLocator(GatewayProperties properties,
         List<GatewayFilterFactory> gatewayFilters,
         List<RoutePredicateFactory> predicates,
         RouteDefinitionLocator routeDefinitionLocator,
         ConfigurationService configurationService) { // 根据构造器创建路由定位器
      return new RouteDefinitionRouteLocator(routeDefinitionLocator, predicates,
            gatewayFilters, properties, configurationService);
   }
   @Bean
   @Primary
   @ConditionalOnMissingBean(name = "cachedCompositeRouteLocator")
   public RouteLocator cachedCompositeRouteLocator(List<RouteLocator> routeLocators) {
      return new CachingRouteLocator(// 缓存路由定位器
            new CompositeRouteLocator(Flux.fromIterable(routeLocators)));
   }
   @Bean
   public RouteRefreshListener routeRefreshListener(// 路由刷新监听
         ApplicationEventPublisher publisher) {
      return new RouteRefreshListener(publisher); // 允许动态修改路由配置
   }
   @Bean
   public FilteringWebHandler filteringWebHandler(List<GlobalFilter> globalFilters) {
      return new FilteringWebHandler(globalFilters);
   }
   @Bean
   public GlobalCorsProperties globalCorsProperties() {
      return new GlobalCorsProperties();
   }
   @Bean
   public RoutePredicateHandlerMapping routePredicateHandlerMapping(
         FilteringWebHandler webHandler, RouteLocator routeLocator,
         GlobalCorsProperties globalCorsProperties, Environment environment) {
      return new RoutePredicateHandlerMapping(webHandler, routeLocator,
            globalCorsProperties, environment);
   }
   @Bean
   public GatewayProperties gatewayProperties() { // 网关配置的属性内容
      return new GatewayProperties();
   }
   @Bean
   public SecureHeadersProperties secureHeadersProperties() {
      return new SecureHeadersProperties();
   }
   @Bean
   @ConditionalOnProperty(name = "spring.cloud.gateway.forwarded.enabled",
         matchIfMissing = true)
   public ForwardedHeadersFilter forwardedHeadersFilter() {
      return new ForwardedHeadersFilter();// 过滤器
   }
   @Bean
   public RemoveHopByHopHeadersFilter removeHopByHopHeadersFilter() {
      return new RemoveHopByHopHeadersFilter();
   }
   @Bean
   @ConditionalOnProperty(name = "spring.cloud.gateway.x-forwarded.enabled",
         matchIfMissing = true)
   public XForwardedHeadersFilter xForwardedHeadersFilter() {
      return new XForwardedHeadersFilter();
   }
   @Bean
   public AdaptCachedBodyGlobalFilter adaptCachedBodyGlobalFilter() {
      return new AdaptCachedBodyGlobalFilter();
   }
   @Bean
   public RemoveCachedBodyFilter removeCachedBodyFilter() {
      return new RemoveCachedBodyFilter();
   }
   @Bean
   public RouteToRequestUrlFilter routeToRequestUrlFilter() {
      return new RouteToRequestUrlFilter();
   }
   @Bean
   public ForwardRoutingFilter forwardRoutingFilter(
         ObjectProvider<DispatcherHandler> dispatcherHandler) {
      return new ForwardRoutingFilter(dispatcherHandler);
   }
   @Bean
   public ForwardPathFilter forwardPathFilter() {
      return new ForwardPathFilter();
   }
   @Bean
   public WebSocketService webSocketService() {
      return new HandshakeWebSocketService();
   }
   @Bean
   public WebsocketRoutingFilter websocketRoutingFilter(WebSocketClient webSocketClient,
         WebSocketService webSocketService,
         ObjectProvider<List<HttpHeadersFilter>> headersFilters) {
      return new WebsocketRoutingFilter(webSocketClient, webSocketService,
            headersFilters);
   }
   @Bean
   public WeightCalculatorWebFilter weightCalculatorWebFilter(
         ConfigurationService configurationService,
         ObjectProvider<RouteLocator> routeLocator) {
      return new WeightCalculatorWebFilter(routeLocator, configurationService);
   }
   @Bean
   public AfterRoutePredicateFactory afterRoutePredicateFactory() {
      return new AfterRoutePredicateFactory();
   }
   @Bean
   public BeforeRoutePredicateFactory beforeRoutePredicateFactory() {
      return new BeforeRoutePredicateFactory();
   }
   @Bean
   public BetweenRoutePredicateFactory betweenRoutePredicateFactory() {
      return new BetweenRoutePredicateFactory();
   }
   @Bean
   public CookieRoutePredicateFactory cookieRoutePredicateFactory() {
      return new CookieRoutePredicateFactory();
   }
   @Bean
   public HeaderRoutePredicateFactory headerRoutePredicateFactory() {
      return new HeaderRoutePredicateFactory();
   }
   @Bean
   public HostRoutePredicateFactory hostRoutePredicateFactory() {
      return new HostRoutePredicateFactory();
   }
   @Bean
   public MethodRoutePredicateFactory methodRoutePredicateFactory() {
      return new MethodRoutePredicateFactory();
   }
   @Bean
   public PathRoutePredicateFactory pathRoutePredicateFactory() {
      return new PathRoutePredicateFactory();
   }
   @Bean
   public QueryRoutePredicateFactory queryRoutePredicateFactory() {
      return new QueryRoutePredicateFactory();
   }
   @Bean
   public ReadBodyPredicateFactory readBodyPredicateFactory() {
      return new ReadBodyPredicateFactory();
   }
   @Bean
   public RemoteAddrRoutePredicateFactory remoteAddrRoutePredicateFactory() {
      return new RemoteAddrRoutePredicateFactory();
   }
   @Bean
   @DependsOn("weightCalculatorWebFilter")
   public WeightRoutePredicateFactory weightRoutePredicateFactory() {
      return new WeightRoutePredicateFactory();
   }
   @Bean
   public CloudFoundryRouteServiceRoutePredicateFactory cloudFoundryRouteServiceRoutePredicateFactory() {
      return new CloudFoundryRouteServiceRoutePredicateFactory();
   }
   @Bean
   public AddRequestHeaderGatewayFilterFactory addRequestHeaderGatewayFilterFactory() {
      return new AddRequestHeaderGatewayFilterFactory();
   }
   @Bean
   public MapRequestHeaderGatewayFilterFactory mapRequestHeaderGatewayFilterFactory() {
      return new MapRequestHeaderGatewayFilterFactory();
   }
   @Bean
   public AddRequestParameterGatewayFilterFactory addRequestParameterGatewayFilterFactory() {
      return new AddRequestParameterGatewayFilterFactory();
   }
   @Bean
   public AddResponseHeaderGatewayFilterFactory addResponseHeaderGatewayFilterFactory() {
      return new AddResponseHeaderGatewayFilterFactory();
   }
   @Bean
   public ModifyRequestBodyGatewayFilterFactory modifyRequestBodyGatewayFilterFactory(
         ServerCodecConfigurer codecConfigurer) {
      return new ModifyRequestBodyGatewayFilterFactory(codecConfigurer.getReaders());
   }
   @Bean
   public DedupeResponseHeaderGatewayFilterFactory dedupeResponseHeaderGatewayFilterFactory() {
      return new DedupeResponseHeaderGatewayFilterFactory();
   }
   @Bean
   public ModifyResponseBodyGatewayFilterFactory modifyResponseBodyGatewayFilterFactory(
         ServerCodecConfigurer codecConfigurer, Set<MessageBodyDecoder> bodyDecoders,
         Set<MessageBodyEncoder> bodyEncoders) {
      return new ModifyResponseBodyGatewayFilterFactory(codecConfigurer.getReaders(),
            bodyDecoders, bodyEncoders);
   }
   @Bean
   public PrefixPathGatewayFilterFactory prefixPathGatewayFilterFactory() {
      return new PrefixPathGatewayFilterFactory();
   }
   @Bean
   public PreserveHostHeaderGatewayFilterFactory preserveHostHeaderGatewayFilterFactory() {
      return new PreserveHostHeaderGatewayFilterFactory();
   }
   @Bean
   public RedirectToGatewayFilterFactory redirectToGatewayFilterFactory() {
      return new RedirectToGatewayFilterFactory();
   }
   @Bean
   public RemoveRequestHeaderGatewayFilterFactory removeRequestHeaderGatewayFilterFactory() {
      return new RemoveRequestHeaderGatewayFilterFactory();
   }
   @Bean
   public RemoveRequestParameterGatewayFilterFactory removeRequestParameterGatewayFilterFactory() {
      return new RemoveRequestParameterGatewayFilterFactory();
   }
   @Bean
   public RemoveResponseHeaderGatewayFilterFactory removeResponseHeaderGatewayFilterFactory() {
      return new RemoveResponseHeaderGatewayFilterFactory();
   }

   @Bean(name = PrincipalNameKeyResolver.BEAN_NAME)
   @ConditionalOnBean(RateLimiter.class)
   @ConditionalOnMissingBean(KeyResolver.class)
   public PrincipalNameKeyResolver principalNameKeyResolver() {
      return new PrincipalNameKeyResolver();
   }
   @Bean
   @ConditionalOnBean({ RateLimiter.class, KeyResolver.class })
   public RequestRateLimiterGatewayFilterFactory requestRateLimiterGatewayFilterFactory(
         RateLimiter rateLimiter, KeyResolver resolver) {
      return new RequestRateLimiterGatewayFilterFactory(rateLimiter, resolver);
   }
   @Bean
   public RewritePathGatewayFilterFactory rewritePathGatewayFilterFactory() {
      return new RewritePathGatewayFilterFactory();
   }
   @Bean
   public RetryGatewayFilterFactory retryGatewayFilterFactory() {
      return new RetryGatewayFilterFactory();
   }
   @Bean
   public SetPathGatewayFilterFactory setPathGatewayFilterFactory() {
      return new SetPathGatewayFilterFactory();
   }
   @Bean
   public SecureHeadersGatewayFilterFactory secureHeadersGatewayFilterFactory(
         SecureHeadersProperties properties) {
      return new SecureHeadersGatewayFilterFactory(properties);
   }
   @Bean
   public SetRequestHeaderGatewayFilterFactory setRequestHeaderGatewayFilterFactory() {
      return new SetRequestHeaderGatewayFilterFactory();
   }
   @Bean
   public SetResponseHeaderGatewayFilterFactory setResponseHeaderGatewayFilterFactory() {
      return new SetResponseHeaderGatewayFilterFactory();
   }
   @Bean
   public RewriteResponseHeaderGatewayFilterFactory rewriteResponseHeaderGatewayFilterFactory() {
      return new RewriteResponseHeaderGatewayFilterFactory();
   }
   @Bean
   public RewriteLocationResponseHeaderGatewayFilterFactory rewriteLocationResponseHeaderGatewayFilterFactory() {
      return new RewriteLocationResponseHeaderGatewayFilterFactory();
   }
   @Bean
   public SetStatusGatewayFilterFactory setStatusGatewayFilterFactory() {
      return new SetStatusGatewayFilterFactory();
   }
   @Bean
   public SaveSessionGatewayFilterFactory saveSessionGatewayFilterFactory() {
      return new SaveSessionGatewayFilterFactory();
   }
   @Bean
   public StripPrefixGatewayFilterFactory stripPrefixGatewayFilterFactory() {
      return new StripPrefixGatewayFilterFactory();
   }
   @Bean
   public RequestHeaderToRequestUriGatewayFilterFactory requestHeaderToRequestUriGatewayFilterFactory() {
      return new RequestHeaderToRequestUriGatewayFilterFactory();
   }
   @Bean
   public RequestSizeGatewayFilterFactory requestSizeGatewayFilterFactory() {
      return new RequestSizeGatewayFilterFactory();
   }
   @Bean
   public RequestHeaderSizeGatewayFilterFactory requestHeaderSizeGatewayFilterFactory() {
      return new RequestHeaderSizeGatewayFilterFactory();
   }
   @Bean
   public GzipMessageBodyResolver gzipMessageBodyResolver() {
      return new GzipMessageBodyResolver();
   }
   @Configuration(proxyBeanMethods = false)
   @ConditionalOnClass(HttpClient.class)
   protected static class NettyConfiguration { // 进行Netty相关配置
      protected final Log logger = LogFactory.getLog(getClass());
      @Bean
      @ConditionalOnProperty(name = "spring.cloud.gateway.httpserver.wiretap")
      public NettyWebServerFactoryCustomizer nettyServerWiretapCustomizer(
            Environment environment, ServerProperties serverProperties) {
         return new NettyWebServerFactoryCustomizer(environment, serverProperties) {
            @Override
            public void customize(NettyReactiveWebServerFactory factory) {
               factory.addServerCustomizers(httpServer -> httpServer.wiretap(true));
               super.customize(factory);
            }
         };
      }
      @Bean
      @ConditionalOnMissingBean
      public HttpClient gatewayHttpClient(HttpClientProperties properties,
            List<HttpClientCustomizer> customizers) {
         HttpClientProperties.Pool pool = properties.getPool();
         ConnectionProvider connectionProvider;
         if (pool.getType() == DISABLED) {
            connectionProvider = ConnectionProvider.newConnection();
         }
         else if (pool.getType() == FIXED) {
            connectionProvider = ConnectionProvider.fixed(pool.getName(),
                  pool.getMaxConnections(), pool.getAcquireTimeout(),
                  pool.getMaxIdleTime(), pool.getMaxLifeTime());
         }
         else {
            connectionProvider = ConnectionProvider.elastic(pool.getName(),
                  pool.getMaxIdleTime(), pool.getMaxLifeTime());
         }
         HttpClient httpClient = HttpClient.create(connectionProvider)
               // TODO: move customizations to HttpClientCustomizers
               .httpResponseDecoder(spec -> {
                  if (properties.getMaxHeaderSize() != null) {
                     // cast to int is ok, since @Max is Integer.MAX_VALUE
                     spec.maxHeaderSize(
                           (int) properties.getMaxHeaderSize().toBytes());
                  }
                  if (properties.getMaxInitialLineLength() != null) {
                     // cast to int is ok, since @Max is Integer.MAX_VALUE
                     spec.maxInitialLineLength(
                           (int) properties.getMaxInitialLineLength().toBytes());
                  }
                  return spec;
               }).tcpConfiguration(tcpClient -> {

                  if (properties.getConnectTimeout() != null) {
                     tcpClient = tcpClient.option(
                           ChannelOption.CONNECT_TIMEOUT_MILLIS,
                           properties.getConnectTimeout());
                  }

                  // configure proxy if proxy host is set.
                  HttpClientProperties.Proxy proxy = properties.getProxy();

                  if (StringUtils.hasText(proxy.getHost())) {

                     tcpClient = tcpClient.proxy(proxySpec -> {
                        ProxyProvider.Builder builder = proxySpec
                              .type(ProxyProvider.Proxy.HTTP)
                              .host(proxy.getHost());

                        PropertyMapper map = PropertyMapper.get();

                        map.from(proxy::getPort).whenNonNull().to(builder::port);
                        map.from(proxy::getUsername).whenHasText()
                              .to(builder::username);
                        map.from(proxy::getPassword).whenHasText()
                              .to(password -> builder.password(s -> password));
                        map.from(proxy::getNonProxyHostsPattern).whenHasText()
                              .to(builder::nonProxyHosts);
                     });
                  }
                  return tcpClient;
               });

         HttpClientProperties.Ssl ssl = properties.getSsl();
         if ((ssl.getKeyStore() != null && ssl.getKeyStore().length() > 0)
               || ssl.getTrustedX509CertificatesForTrustManager().length > 0
               || ssl.isUseInsecureTrustManager()) {
            httpClient = httpClient.secure(sslContextSpec -> {
               // configure ssl
               SslContextBuilder sslContextBuilder = SslContextBuilder.forClient();

               X509Certificate[] trustedX509Certificates = ssl
                     .getTrustedX509CertificatesForTrustManager();
               if (trustedX509Certificates.length > 0) {
                  sslContextBuilder = sslContextBuilder
                        .trustManager(trustedX509Certificates);
               }
               else if (ssl.isUseInsecureTrustManager()) {
                  sslContextBuilder = sslContextBuilder
                        .trustManager(InsecureTrustManagerFactory.INSTANCE);
               }

               try {
                  sslContextBuilder = sslContextBuilder
                        .keyManager(ssl.getKeyManagerFactory());
               }
               catch (Exception e) {
                  logger.error(e);
               }

               sslContextSpec.sslContext(sslContextBuilder)
                     .defaultConfiguration(ssl.getDefaultConfigurationType())
                     .handshakeTimeout(ssl.getHandshakeTimeout())
                     .closeNotifyFlushTimeout(ssl.getCloseNotifyFlushTimeout())
                     .closeNotifyReadTimeout(ssl.getCloseNotifyReadTimeout());
            });
         }

         if (properties.isWiretap()) {
            httpClient = httpClient.wiretap(true);
         }

         if (!CollectionUtils.isEmpty(customizers)) {
            customizers.sort(AnnotationAwareOrderComparator.INSTANCE);
            for (HttpClientCustomizer customizer : customizers) {
               httpClient = customizer.customize(httpClient);
            }
         }

         return httpClient;
      }

      @Bean
      public HttpClientProperties httpClientProperties() {
         return new HttpClientProperties();
      }

      @Bean
      public NettyRoutingFilter routingFilter(HttpClient httpClient,
            ObjectProvider<List<HttpHeadersFilter>> headersFilters,
            HttpClientProperties properties) {
         return new NettyRoutingFilter(httpClient, headersFilters, properties);
      }

      @Bean
      public NettyWriteResponseFilter nettyWriteResponseFilter(
            GatewayProperties properties) {
         return new NettyWriteResponseFilter(properties.getStreamingMediaTypes());
      }

      @Bean
      public ReactorNettyWebSocketClient reactorNettyWebSocketClient(
            HttpClientProperties properties, HttpClient httpClient) {
         ReactorNettyWebSocketClient webSocketClient = new ReactorNettyWebSocketClient(
               httpClient);
         if (properties.getWebsocket().getMaxFramePayloadLength() != null) {
            webSocketClient.setMaxFramePayloadLength(
                  properties.getWebsocket().getMaxFramePayloadLength());
         }
         webSocketClient.setHandlePing(properties.getWebsocket().isProxyPing());
         return webSocketClient;
      }
   }
   @Configuration(proxyBeanMethods = false)
   @ConditionalOnClass({ HystrixObservableCommand.class, RxReactiveStreams.class })
   protected static class HystrixConfiguration { // Hystrix相关配置
      @Bean
      public HystrixGatewayFilterFactory hystrixGatewayFilterFactory(
            ObjectProvider<DispatcherHandler> dispatcherHandler) {
         return new HystrixGatewayFilterFactory(dispatcherHandler);
      }
      @Bean
      @ConditionalOnMissingBean(FallbackHeadersGatewayFilterFactory.class)
      public FallbackHeadersGatewayFilterFactory fallbackHeadersGatewayFilterFactory() {
         return new FallbackHeadersGatewayFilterFactory();
      }
   }
   @Configuration(proxyBeanMethods = false)
   @ConditionalOnClass(Health.class)
   protected static class GatewayActuatorConfiguration { // Actuator监控服务配置
      @Bean
      @ConditionalOnProperty(name = "spring.cloud.gateway.actuator.verbose.enabled",
            matchIfMissing = true)
      @ConditionalOnAvailableEndpoint
      public GatewayControllerEndpoint gatewayControllerEndpoint(
            List<GlobalFilter> globalFilters,
            List<GatewayFilterFactory> gatewayFilters,
            List<RoutePredicateFactory> routePredicates,
            RouteDefinitionWriter routeDefinitionWriter, RouteLocator routeLocator) {
         return new GatewayControllerEndpoint(globalFilters, gatewayFilters,
               routePredicates, routeDefinitionWriter, routeLocator);
      }
      @Bean
      @Conditional(OnVerboseDisabledCondition.class)
      @ConditionalOnAvailableEndpoint
      public GatewayLegacyControllerEndpoint gatewayLegacyControllerEndpoint(
            RouteDefinitionLocator routeDefinitionLocator,
            List<GlobalFilter> globalFilters,
            List<GatewayFilterFactory> gatewayFilters,
            List<RoutePredicateFactory> routePredicates,
            RouteDefinitionWriter routeDefinitionWriter, RouteLocator routeLocator) {
         return new GatewayLegacyControllerEndpoint(routeDefinitionLocator,
               globalFilters, gatewayFilters, routePredicates, routeDefinitionWriter,
               routeLocator);
      }
   }
   private static class OnVerboseDisabledCondition extends NoneNestedConditions {
      OnVerboseDisabledCondition() {
         super(ConfigurationPhase.REGISTER_BEAN);
      }
      @ConditionalOnProperty(name = "spring.cloud.gateway.actuator.verbose.enabled",
            matchIfMissing = true)
      static class VerboseDisabled {
      }
   }
}


2、


3、


4、


5、


6、


7、


8、


9、

