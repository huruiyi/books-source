1、
@Bean
public RoutePredicateHandlerMapping routePredicateHandlerMapping(
      FilteringWebHandler webHandler, RouteLocator routeLocator,
      GlobalCorsProperties globalCorsProperties, Environment environment) {
   return new RoutePredicateHandlerMapping(webHandler, routeLocator,
         globalCorsProperties, environment);
}


2、
package org.springframework.cloud.gateway.handler;
public class RoutePredicateHandlerMapping extends AbstractHandlerMapping {
   private final FilteringWebHandler webHandler;  // 网关过滤器
   private final RouteLocator routeLocator; // 网关路由定位
   private final Integer managementPort; // 管理端口
   private final ManagementPortType managementPortType; // 端口类型
   public RoutePredicateHandlerMapping(FilteringWebHandler webHandler,
         RouteLocator routeLocator, GlobalCorsProperties globalCorsProperties,
         Environment environment) {
      this.webHandler = webHandler;
      this.routeLocator = routeLocator;
      this.managementPort = getPortProperty(environment, "management.server.");
      this.managementPortType = getManagementPortType(environment);
      setOrder(1); // 设置执行顺序
      setCorsConfigurations(globalCorsProperties.getCorsConfigurations());
   }
   private ManagementPortType getManagementPortType(Environment environment) {
      Integer serverPort = getPortProperty(environment, "server."); // 获取端口内容
      if (this.managementPort != null && this.managementPort < 0) {
         return DISABLED; // 端口类型的处理
      }
      return ((this.managementPort == null
            || (serverPort == null && this.managementPort.equals(8080))
            || (this.managementPort != 0 && this.managementPort.equals(serverPort)))
                  ? SAME : DIFFERENT);
   }
   private static Integer getPortProperty(Environment environment, String prefix) {
      return environment.getProperty(prefix + "port", Integer.class); // 处理属性
   }
   @Override
   protected Mono<?> getHandlerInternal(ServerWebExchange exchange) {
      // don't handle requests on management port if set and different than server port
      if (this.managementPortType == DIFFERENT && this.managementPort != null
            && exchange.getRequest().getURI().getPort() == this.managementPort) {
         return Mono.empty();// 端口处理类型是否符合预期，直接返回空
      }
      exchange.getAttributes().put(GATEWAY_HANDLER_MAPPER_ATTR, getSimpleName());
      return lookupRoute(exchange) // 查找路由
            .flatMap((Function<Route, Mono<?>>) r -> {
               exchange.getAttributes().remove(GATEWAY_PREDICATE_ROUTE_ATTR);
               if (logger.isDebugEnabled()) {
                  logger.debug(
                        "Mapping [" + getExchangeDesc(exchange) + "] to " + r);
               }
               exchange.getAttributes().put(GATEWAY_ROUTE_ATTR, r);
               return Mono.just(webHandler); // 进行WEB处理
            }).switchIfEmpty(Mono.empty().then(Mono.fromRunnable(() -> {
               exchange.getAttributes().remove(GATEWAY_PREDICATE_ROUTE_ATTR);
               if (logger.isTraceEnabled()) {
                  logger.trace("No RouteDefinition found for ["
                        + getExchangeDesc(exchange) + "]");
               }
            })));
   }
   @Override
   protected CorsConfiguration getCorsConfiguration(Object handler,
         ServerWebExchange exchange) {
      return super.getCorsConfiguration(handler, exchange);
   }
   private String getExchangeDesc(ServerWebExchange exchange) {
      StringBuilder out = new StringBuilder();
      out.append("Exchange: ");
      out.append(exchange.getRequest().getMethod());
      out.append(" ");
      out.append(exchange.getRequest().getURI());
      return out.toString();
   }
   protected Mono<Route> lookupRoute(ServerWebExchange exchange) { // 路由查找
      return this.routeLocator.getRoutes() // 通过路由定位器获取全部的路由
            .concatMap(route -> Mono.just(route).filterWhen(r -> {
               // 对当前的路由进行一些测试处理
               exchange.getAttributes().put(GATEWAY_PREDICATE_ROUTE_ATTR, r.getId());
               return r.getPredicate().apply(exchange); // 路由的处理
            })
                  .doOnError(e -> logger.error(// 路由错误
                        "Error applying predicate for route: " + route.getId(),
                        e))
                  .onErrorResume(e -> Mono.empty()))
            .next()
            .map(route -> { // 路由处理
               if (logger.isDebugEnabled()) {
                  logger.debug("Route matched: " + route.getId());
               }
               validateRoute(route, exchange); // 路由校验
               return route; // 返回路由对象
            });
   }
   @SuppressWarnings("UnusedParameters")
   protected void validateRoute(Route route, ServerWebExchange exchange) {
   }
   protected String getSimpleName() {
      return "RoutePredicateHandlerMapping";
   }
   public enum ManagementPortType { // 端口的类型定义
      DISABLED, // 服务端口关闭
      SAME, // 与应用的端口相同
      DIFFERENT; // 与应用的端口不同
   }
}


3、


4、


5、


6、


7、


8、


9、

