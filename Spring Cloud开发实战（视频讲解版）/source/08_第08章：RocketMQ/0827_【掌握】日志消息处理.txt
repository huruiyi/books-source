1、
// https://mvnrepository.com/artifact/org.apache.rocketmq/rocketmq-client
implementation group: 'org.apache.rocketmq', name: 'rocketmq-client', version: '4.9.2'
implementation group: 'org.apache.rocketmq', name: 'rocketmq-acl', version: '4.9.2'
implementation group: 'org.apache.rocketmq', name: 'rocketmq-logappender', version: '4.9.2'

// https://mvnrepository.com/artifact/ch.qos.logback/logback-core
implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.6'
// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.6'




2、

ext.versions = [                // 定义全部的依赖库版本号
    springboot           : '2.2.5.RELEASE',      // SpringBoot版本号
    springcloud          : 'Hoxton.SR3', // SpringCloud版本号
    alibabacloud         : '2.2.1.RELEASE', // SpringCloudAlibaba版本号
    lombok               : '1.18.20', // Lombok版本号
    junit                : '5.6.3', // 配置JUnit测试工具的版本编号
    junitPlatformLauncher: '1.6.3',  // JUnit测试工具运行平台版本编号
    mybatisPlus          : '3.4.3', // MyBatisPlus的版本号
    mysql                : '8.0.25', // MySQL数据库驱动版本
    druid                : '1.2.6', // Druid版本号
    swagger              : '3.0.0', // Swagger版本号
    nacos                : '2.0.2', // Nacos版本号
    httpclient           : '4.5.13', // HttpClient版本号
    feignHttpclient      : '11.6', // FeignHttpClient版本号
    sentinel             : '1.8.2', // Sentinel版本号
    caffeine             : '3.0.4', // Caffeine缓存组件版本号
    micrometer           : '1.7.0', // Prometheus相关监控依赖，与服务部署的版本号相同
    servlet              : '4.0.1', // Servlet的依赖库
    commonsCodec         : '1.15', // codec依赖库
    jjwt                 : '0.9.1', // jwt依赖库
    jaxb                 : '2.3.0', // JAXB依赖库
    admin                : '2.3.0', // SpringBootAdmin依赖版本
    rocketmq             : '4.9.2', // RocketMQ的依赖库版本
    logback              : '1.2.6', // logback组件的依赖库版本
    slf4j                : '1.7.32', // SLF4J日志标准的依赖库版本
]
ext.libraries = [            // 依赖库引入配置
     'spring-boot-gradle-plugin'        :
             "org.springframework.boot:spring-boot-gradle-plugin:${versions.springboot}",
     'spring-cloud-dependencies'        :
             "org.springframework.cloud:spring-cloud-dependencies:${versions.springcloud}",
     'spring-cloud-alibaba-dependencies':
             "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${versions.alibabacloud}",
     // 以下的配置为与项目用例测试有关的依赖
     'junit-jupiter-api'                :
             "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
     'junit-vintage-engine'             :
             "org.junit.vintage:junit-vintage-engine:${versions.junit}",
     'junit-jupiter-engine'             :
             "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
     'junit-platform-launcher'          :
             "org.junit.platform:junit-platform-launcher:${versions.junitPlatformLauncher}",
     'junit-platform-engine'            :
             "org.junit.platform:junit-platform-engine:${versions.junitPlatformLauncher}",
     'junit-jupiter-params'             :
             "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
     'junit-bom'                        : "org.junit:junit-bom:${versions.junit}",
     'junit-platform-commons'           :
             "org.junit.platform:junit-platform-commons:${versions.junitPlatformLauncher}",
     // 以下的配置为Lombok组件有关的依赖
     'lombok'                           : "org.projectlombok:lombok:${versions.lombok}",
     // 以下的配置为数据库开发有关的依赖
     'mybatis-plus-boot-starter'        : "com.baomidou:mybatis-plus-boot-starter:${versions.mybatisPlus}",
     'mysql-connector-java'             : "mysql:mysql-connector-java:${versions.mysql}",
     'druid'                            : "com.alibaba:druid:${versions.druid}",
     // 以下的配置为Swagger有关的依赖库
    'springfox-boot-starter'            : "io.springfox:springfox-boot-starter:${versions.swagger}",
     // 以下的配置为Nacos有关的依赖库
    'nacos-client'                      : "com.alibaba.nacos:nacos-client:${versions.nacos}",
    // 以下的配置为Feign与HttpClient有关的依赖库
    'httpclient'                        : "org.apache.httpcomponents:httpclient:${versions.httpclient}",
    'feign-httpclient'                  : "io.github.openfeign:feign-httpclient:${versions.feignHttpclient}",
    // 以下的配置为Sentinel有关的组件依赖
    'sentinel-datasource-nacos'         : "com.alibaba.csp:sentinel-datasource-nacos:${versions.sentinel}",
    // 以下的配置为LoadBalancer所需要的Caffeine组件有关依赖
    'caffeine'                          : "com.github.ben-manes.caffeine:caffeine:${versions.caffeine}",
    // 以下的配置为Prometheus服务整合
    'micrometer-registry-prometheus': "io.micrometer:micrometer-registry-prometheus:${versions.micrometer}",
    'micrometer-core': "io.micrometer:micrometer-core:${versions.micrometer}",
    // 以下的配置为JWT的服务整合
    'servlet-api'                       : "javax.servlet:javax.servlet-api:${versions.servlet}",
    'commons-codec'                     : "commons-codec:commons-codec:${versions.commonsCodec}",
    'jjwt'                              : "io.jsonwebtoken:jjwt:${versions.jjwt}",
    'jaxb-api'                          : "javax.xml.bind:jaxb-api:${versions.jaxb}",
    'jaxb-impl'                         : "com.sun.xml.bind:jaxb-impl:${versions.jaxb}",
    'jaxb-core'                         : "com.sun.xml.bind:jaxb-core:${versions.jaxb}",
    // 以下的配置为SpringBootAdmin服务整合
    'spring-boot-admin-starter-server'  : "de.codecentric:spring-boot-admin-starter-server:${versions.admin}",
    'spring-boot-admin-starter-client'  : "de.codecentric:spring-boot-admin-starter-client:${versions.admin}",
    // 以下的配置为RocketMQ相关服务的整合依赖
    'rocketmq-client'                   : "org.apache.rocketmq:rocketmq-client:${versions.rocketmq}",
    'rocketmq-acl'                      : "org.apache.rocketmq:rocketmq-acl:${versions.rocketmq}",
    // 以下的配置为RocketMQ与Logback日志组件的服务整合依赖：
    'rocketmq-logappender'              : "org.apache.rocketmq:rocketmq-logappender:${versions.rocketmq}",
    'logback-core'                      : "ch.qos.logback:logback-core:${versions.logback}",
    'logback-classic'                   : "ch.qos.logback:logback-classic:${versions.logback}",
    'slf4j-api'                         : "org.slf4j:slf4j-api:${versions.slf4j}",
]



3、
project(":rocketmq-logback") {    // 部门微服务
    dependencies {
        implementation(libraries.'rocketmq-client')
        implementation(libraries.'rocketmq-acl')
        implementation(libraries.'rocketmq-logappender')
        implementation(libraries.'logback-core')
        implementation(libraries.'logback-classic')
        implementation(libraries.'slf4j-api')
    }
}

4、


<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <property name="LOG_HOME" value="c:/log" />			<!-- 日志保存目录 -->
    <appender name="STDOUT" 
	class="ch.qos.logback.core.ConsoleAppender">		<!-- 控制台输出 -->
        <Encoding>UTF-8</Encoding> 					<!-- 日志编码 -->
        <layout class="ch.qos.logback.classic.PatternLayout">	<!-- 日志格式 -->
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
    </appender>
    <appender name="FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender"> <!-- 本地日志文件 -->
        <Encoding>UTF-8</Encoding> 					<!-- 日志编码 -->
        <!-- 定义日志文件的生成结构，将每天的日志保存在一个文件之中，最多保留30天日志 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}/rocketmq.%d{yyyy-MM-dd}.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <layout class="ch.qos.logback.classic.PatternLayout">	<!-- 日志格式 -->
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </layout>
    </appender>
    <!-- 定义RocketMQ连接的相关属性内容，注意：在RocketMQLogback中没有ACL配置支持 -->
    <appender name="RocketMQAppender"
              class="org.apache.rocketmq.logappender.logback.RocketmqLogbackAppender">
        <tag>logback</tag> 					<!-- 消息标签 -->
        <topic>TopicLogback</topic> 				<!-- 消息主题 -->
        <producerGroup>logback-group</producerGroup> 		<!-- 消息分组 -->
        <nameServerAddress>rocketmq-server:9876</nameServerAddress> 	<!-- NameServer -->
        <layout><pattern>%date %p %t - %m%n</pattern></layout>	<!-- 消息格式 -->
    </appender>
    <appender name="RocketMQAsyncAppender"
              class="ch.qos.logback.classic.AsyncAppender"> 		<!-- 异步消息 -->
        <queueSize>1024</queueSize> 				<!-- 阻塞队列长度 -->
        <discardingThreshold>80</discardingThreshold> 		<!-- 丢弃阈值 -->
        <maxFlushTime>2000</maxFlushTime> 				<!-- 刷新时间 -->
        <neverBlock>true</neverBlock> 				<!-- 异步处理 -->
        <appender-ref ref="RocketMQAppender"/> 			<!-- 配置引用 -->
    </appender>
    <logger name="com.yootk" level="debug"/> 			<!-- 日志级别 -->
    <root level="DEBUG"> 						<!-- 日志级别 -->
        <appender-ref ref="RocketMQAppender" /> 			<!-- 消息日志 -->
        <appender-ref ref="STDOUT" /> 				<!-- 控制台日志 -->
        <appender-ref ref="FILE" /> 				<!-- 文件日志 -->
    </root>
</configuration>

5、package com.yootk.rockemq;

import org.apache.rocketmq.acl.common.AclClientRPCHook;
import org.apache.rocketmq.acl.common.SessionCredentials;
import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
import org.apache.rocketmq.common.message.MessageExt;
import org.apache.rocketmq.remoting.RPCHook;

import java.util.List;

public class MessageLogbackConsumer { // 消息消费者
    // 如果此时你使用的是集群服务，则每个主机之间使用“,”分割
    public static final String NAME_SERVER_LIST = "rocketmq-server:9876"; // NameServer
    public static final String CONSUMER_GROUP = "muyan-group-logback"; // 定义消费组
    public static final String TOPIC = "TopicLogback"; // 定义主题名称
    public static final String ACCESS_KEY = "RocketMQMuyan"; // 定义用户名
    public static final String SECRET_KEY = "helloyootk"; // 定义密码
    public static void main(String[] args) throws Exception { // 懒人必备的处理形式
        // 1、由于此时的RocketMQ启动了ACL安全认证的保护机制，所以需要配置相应的回调
        RPCHook clientHook = new AclClientRPCHook(new SessionCredentials(ACCESS_KEY, SECRET_KEY));
        // 2、要在项目之中启动一个消费者的处理程序类，但是这个消费者分为两种形式
        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(CONSUMER_GROUP, clientHook, new AllocateMessageQueueAveragely());
        consumer.setNamesrvAddr(NAME_SERVER_LIST); // 通过NameServer获取相应的Broker数据
        consumer.subscribe(TOPIC, "*"); // 匹配指定主题的所有消息
        // 3、进行消息监听的处理操作，在监听的时候要使用专属的监听接口
        consumer.registerMessageListener(new MessageListenerConcurrently() { // 准备接收消息
            @Override
            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
                msgs.forEach((msg)->{
                    System.out.printf("【%s】接收到新的消息：body = %s、level = %s %n", Thread.currentThread().getName(), new String(msg.getBody()), msg.getProperty("level"));
                });
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS; // 消息消费成功
            }
        });
        consumer.start(); // 启动消息的消费者
    }
}


6、
package com.yootk.rocketmq.logback;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LogbackProducer {
    private static final Logger LOGGER = LoggerFactory.getLogger(LoggerFactory.class);
    public static void main(String[] args) {
        LOGGER.info("【INFO】沐言科技：www.yootk.com");
        LOGGER.error("【ERROR】沐言科技：www.yootk.com");
        LOGGER.debug("【DEBUG】沐言科技：www.yootk.com");
    }
}


7、


8、


9、

