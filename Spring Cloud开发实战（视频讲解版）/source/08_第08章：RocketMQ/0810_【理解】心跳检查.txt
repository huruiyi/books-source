1、
package org.apache.rocketmq.broker;
public class BrokerController {
    public boolean initialize() throws CloneNotSupportedException {
        boolean result = this.topicConfigManager.load(); // 配置数据读取的结果状态
        result = result && this.consumerOffsetManager.load();
        result = result && this.subscriptionGroupManager.load();
        result = result && this.consumerFilterManager.load();
        if (result) {
            try {
                this.messageStore =
                    new DefaultMessageStore(this.messageStoreConfig, this.brokerStatsManager, this.messageArrivingListener, this.brokerConfig); // 消息的存储配置
                if (messageStoreConfig.isEnableDLegerCommitLog()) {
                    DLedgerRoleChangeHandler roleChangeHandler = new DLedgerRoleChangeHandler(
                        this, (DefaultMessageStore) messageStore);
                                ((DLedgerCommitLog)((DefaultMessageStore)                                    
            messageStore).getCommitLog()).getdLedgerServer().getdLedgerLeaderElector()
                        .addRoleChangeHandler(roleChangeHandler);
                }
                this.brokerStats = new BrokerStats((DefaultMessageStore) this.messageStore);
                MessageStorePluginContext context = new MessageStorePluginContext(
                messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig);
                this.messageStore = MessageStoreFactory.build(context, this.messageStore);
                this.messageStore.getDispatcherList().addFirst(
                        new CommitLogDispatcherCalcBitMap(this.brokerConfig, 
                                this.consumerFilterManager));
            } catch (IOException e) {
                result = false;
                log.error("Failed to initialize", e);
            }
        }
        result = result && this.messageStore.load();
        if (result) {
            this.remotingServer = new NettyRemotingServer(this.nettyServerConfig, 
                        this.clientHousekeepingService);
            NettyServerConfig fastConfig = (NettyServerConfig) this.nettyServerConfig.clone();
            fastConfig.setListenPort(nettyServerConfig.getListenPort() - 2);
            this.fastRemotingServer = new NettyRemotingServer(fastConfig, 
                        this.clientHousekeepingService);
            this.sendMessageExecutor = new BrokerFixedThreadPoolExecutor(
                this.brokerConfig.getSendMessageThreadPoolNums(),
                this.brokerConfig.getSendMessageThreadPoolNums(),
                1000 * 60,
                TimeUnit.MILLISECONDS,
                this.sendThreadPoolQueue,
                new ThreadFactoryImpl("SendMessageThread_"));
            this.pullMessageExecutor = new BrokerFixedThreadPoolExecutor(
                this.brokerConfig.getPullMessageThreadPoolNums(),
                this.brokerConfig.getPullMessageThreadPoolNums(),
                1000 * 60,
                TimeUnit.MILLISECONDS,
                this.pullThreadPoolQueue,
                new ThreadFactoryImpl("PullMessageThread_"));
            this.replyMessageExecutor = new BrokerFixedThreadPoolExecutor(
                this.brokerConfig.getProcessReplyMessageThreadPoolNums(),
                this.brokerConfig.getProcessReplyMessageThreadPoolNums(),
                1000 * 60,
                TimeUnit.MILLISECONDS,
                this.replyThreadPoolQueue,
                new ThreadFactoryImpl("ProcessReplyMessageThread_"));
            this.queryMessageExecutor = new BrokerFixedThreadPoolExecutor(
                this.brokerConfig.getQueryMessageThreadPoolNums(),
                this.brokerConfig.getQueryMessageThreadPoolNums(),
                1000 * 60,
                TimeUnit.MILLISECONDS,
                this.queryThreadPoolQueue,
                new ThreadFactoryImpl("QueryMessageThread_"));
            this.adminBrokerExecutor =
                Executors.newFixedThreadPool(this.brokerConfig.getAdminBrokerThreadPoolNums(), new ThreadFactoryImpl("AdminBrokerThread_"));
            this.clientManageExecutor = new ThreadPoolExecutor(
                this.brokerConfig.getClientManageThreadPoolNums(),
                this.brokerConfig.getClientManageThreadPoolNums(),
                1000 * 60,
                TimeUnit.MILLISECONDS,
                this.clientManagerThreadPoolQueue,
                new ThreadFactoryImpl("ClientManageThread_"));
            this.heartbeatExecutor = new BrokerFixedThreadPoolExecutor( // 心跳执行的线程池
                this.brokerConfig.getHeartbeatThreadPoolNums(),
                this.brokerConfig.getHeartbeatThreadPoolNums(),
                1000 * 60,
                TimeUnit.MILLISECONDS,
                this.heartbeatThreadPoolQueue,
                new ThreadFactoryImpl("HeartbeatThread_", true));
            this.endTransactionExecutor = new BrokerFixedThreadPoolExecutor(
                this.brokerConfig.getEndTransactionThreadPoolNums(),
                this.brokerConfig.getEndTransactionThreadPoolNums(),
                1000 * 60,
                TimeUnit.MILLISECONDS,
                this.endTransactionThreadPoolQueue,
                new ThreadFactoryImpl("EndTransactionThread_"));
            this.consumerManageExecutor =
                Executors.newFixedThreadPool(this.brokerConfig
                  .getConsumerManageThreadPoolNums(), new ThreadFactoryImpl(
                    "ConsumerManageThread_"));
            this.registerProcessor();
            final long initialDelay = UtilAll.computeNextMorningTimeMillis() - System.currentTimeMillis();
            final long period = 1000 * 60 * 60 * 24;
            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                @Override
                public void run() {
                    try {
                        BrokerController.this.getBrokerStats().record();
                    } catch (Throwable e) {
                        log.error("schedule record error.", e);
                    }
                }
            }, initialDelay, period, TimeUnit.MILLISECONDS);
            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                @Override
                public void run() {
                    try {
                        BrokerController.this.consumerOffsetManager.persist();
                    } catch (Throwable e) {
                        log.error("schedule persist consumerOffset error.", e);
                    }
                }
            }, 1000 * 10, this.brokerConfig.getFlushConsumerOffsetInterval(), 
                  TimeUnit.MILLISECONDS);
            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                @Override
                public void run() {
                    try {
                        BrokerController.this.consumerFilterManager.persist();
                    } catch (Throwable e) {
                        log.error("schedule persist consumer filter error.", e);
                    }
                }
            }, 1000 * 10, 1000 * 10, TimeUnit.MILLISECONDS);
            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                @Override
                public void run() {
                    try {
                        BrokerController.this.protectBroker();
                    } catch (Throwable e) {
                        log.error("protectBroker error.", e);
                    }
                }
            }, 3, 3, TimeUnit.MINUTES);
            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                @Override
                public void run() {
                    try {
                        BrokerController.this.printWaterMark();
                    } catch (Throwable e) {
                        log.error("printWaterMark error.", e);
                    }
                }
            }, 10, 1, TimeUnit.SECONDS);
            this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                @Override
                public void run() {
                    try {
                        log.info("dispatch behind commit log {} bytes", BrokerController.this.getMessageStore().dispatchBehindBytes());
                    } catch (Throwable e) {
                        log.error("schedule dispatchBehindBytes error.", e);
                    }
                }
            }, 1000 * 10, 1000 * 60, TimeUnit.MILLISECONDS);

            if (this.brokerConfig.getNamesrvAddr() != null) {
                this.brokerOuterAPI.updateNameServerAddressList(
                  this.brokerConfig.getNamesrvAddr());
                log.info("Set user specified name server address: {}", this.brokerConfig.getNamesrvAddr());
            } else if (this.brokerConfig.isFetchNamesrvAddrByAddressServer()) {
                this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            BrokerController.this.brokerOuterAPI.fetchNameServerAddr();
                        } catch (Throwable e) {
                            log.error("ScheduledTask fetchNameServerAddr exception", e);
                        }
                    }
                }, 1000 * 10, 1000 * 60 * 2, TimeUnit.MILLISECONDS);
            }
            if (!messageStoreConfig.isEnableDLegerCommitLog()) {
                if (BrokerRole.SLAVE == this.messageStoreConfig.getBrokerRole()) {
                    if (this.messageStoreConfig.getHaMasterAddress() != null && this.messageStoreConfig.getHaMasterAddress().length() >= 6) {
                        this.messageStore.updateHaMasterAddress(this.messageStoreConfig.getHaMasterAddress());
                        this.updateMasterHAServerAddrPeriodically = false;
                    } else {
                        this.updateMasterHAServerAddrPeriodically = true;
                    }
                } else {
                    this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                BrokerController.this.printMasterAndSlaveDiff();
                            } catch (Throwable e) {
                                log.error("schedule printMasterAndSlaveDiff error.", e);
                            }
                        }
                    }, 1000 * 10, 1000 * 60, TimeUnit.MILLISECONDS);
                }
            }
            if (TlsSystemConfig.tlsMode != TlsMode.DISABLED) {
                // Register a listener to reload SslContext
                try {
                    fileWatchService = new FileWatchService(
                        new String[] {
                            TlsSystemConfig.tlsServerCertPath,
                            TlsSystemConfig.tlsServerKeyPath,
                            TlsSystemConfig.tlsServerTrustCertPath
                        },
                        new FileWatchService.Listener() {
                            boolean certChanged, keyChanged = false;

                            @Override
                            public void onChanged(String path) {
                                if (path.equals(TlsSystemConfig.tlsServerTrustCertPath)) {
                                    log.info("The trust certificate changed, reload the ssl context");
                                    reloadServerSslContext();
                                }
                                if (path.equals(TlsSystemConfig.tlsServerCertPath)) {
                                    certChanged = true;
                                }
                                if (path.equals(TlsSystemConfig.tlsServerKeyPath)) {
                                    keyChanged = true;
                                }
                                if (certChanged && keyChanged) {
                                    log.info("The certificate and private key changed, reload the ssl context");
                                    certChanged = keyChanged = false;
                                    reloadServerSslContext();
                                }
                            }

                            private void reloadServerSslContext() {
                                ((NettyRemotingServer) remotingServer).loadSslContext();
                                ((NettyRemotingServer) fastRemotingServer).loadSslContext();
                            }
                        });
                } catch (Exception e) {
                    log.warn("FileWatchService created error, can't load the certificate dynamically");
                }
            }
            initialTransaction();
            initialAcl();
            initialRpcHooks();
        }
        return result;
    }
    public void start() throws Exception {
         this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                try {
                    BrokerController.this.registerBrokerAll(true, false, brokerConfig.isForceRegister());
                } catch (Throwable e) {
                    log.error("registerBrokerAll Exception", e);
                }
            }
        }, 1000 * 10, Math.max(10000, Math.min(brokerConfig.getRegisterNameServerPeriod(), 60000)), TimeUnit.MILLISECONDS);
        if (this.brokerStatsManager != null) {
            this.brokerStatsManager.start();
        }
        if (this.brokerFastFailure != null) {
            this.brokerFastFailure.start();
        }
    }
}


2、
package org.apache.rocketmq.common;
public class BrokerConfig {
    /**
     * This configurable item defines interval of topics registration of broker to name server. Allowing values are between 10, 000 and 60, 000 milliseconds.
     */
    private int registerNameServerPeriod = 1000 * 30; // Broker发送到NameSerfver的心跳间隔
}


3、
public synchronized void registerBrokerAll(final boolean checkOrderConfig, 
		boolean oneway, boolean forceRegister) {
    TopicConfigSerializeWrapper topicConfigWrapper = this.getTopicConfigManager()
			.buildTopicConfigSerializeWrapper();	// 获取全部的主题信息
    if (!PermName.isWriteable(this.getBrokerConfig().getBrokerPermission())	// 是否可写？
        || !PermName.isReadable(this.getBrokerConfig().getBrokerPermission())) { // 是否可读？
// 所有要发送到NameServer上的主题信息全部都通过TopicConfig来进行存储
        ConcurrentHashMap<String, TopicConfig> topicConfigTable = 
		new ConcurrentHashMap<String, TopicConfig>(); // 保存所有的主题信息
        for (TopicConfig topicConfig : topicConfigWrapper.getTopicConfigTable().values()) {
            TopicConfig tmp =
                new TopicConfig(topicConfig.getTopicName(), 
			topicConfig.getReadQueueNums(), topicConfig.getWriteQueueNums(),
                    this.brokerConfig.getBrokerPermission()); // 将每一个主题的配置信息全部保存
            topicConfigTable.put(topicConfig.getTopicName(), tmp); 	// 保存主题信息
        }
        topicConfigWrapper.setTopicConfigTable(topicConfigTable);
    }
    if (forceRegister || needRegister(this.brokerConfig.getBrokerClusterName(), // 允许注册？
        this.getBrokerAddr(),
        this.brokerConfig.getBrokerName(),
        this.brokerConfig.getBrokerId(),
        this.brokerConfig.getRegisterBrokerTimeoutMills())) {
        doRegisterBrokerAll(checkOrderConfig, oneway, topicConfigWrapper); // 具体的注册
    }
}


4、
private void doRegisterBrokerAll(boolean checkOrderConfig, boolean oneway,
    TopicConfigSerializeWrapper topicConfigWrapper) {     // 保存了所有的主题信息
    List<RegisterBrokerResult> registerBrokerResultList =  // 保存Broker的注册信息
        this.brokerOuterAPI.registerBrokerAll(
        this.brokerConfig.getBrokerClusterName(), // Broker集群名称
        this.getBrokerAddr(), // Broker地址
        this.brokerConfig.getBrokerName(), // Broker名称
        this.brokerConfig.getBrokerId(), // BrokerID
        this.getHAServerAddr(), // 集群地址
        topicConfigWrapper, // 主题的配置项
        this.filterServerManager.buildNewFilterServerList(),
        oneway,
        this.brokerConfig.getRegisterBrokerTimeoutMills(),
        this.brokerConfig.isCompressedRegister());
    if (registerBrokerResultList.size() > 0) {     // 注册的Broker有很多
        RegisterBrokerResult registerBrokerResult = registerBrokerResultList.get(0); // 获取
        if (registerBrokerResult != null) { // 可以获取到
            if (this.updateMasterHAServerAddrPeriodically && 
                    registerBrokerResult.getHaServerAddr() != null) {
                this.messageStore.updateHaMasterAddress(
                    registerBrokerResult.getHaServerAddr());    // 更新Master主机地址
            }
            this.slaveSynchronize.setMasterAddr(registerBrokerResult.getMasterAddr());
            if (checkOrderConfig) {
                this.getTopicConfigManager().updateOrderTopicConfig(
                        registerBrokerResult.getKvTable());    // 主题的更新操作
            }
        }
    }
}


5、
package org.apache.rocketmq.broker.out;
public class BrokerOuterAPI {
    public List<RegisterBrokerResult> registerBrokerAll(
        final String clusterName,
        final String brokerAddr,
        final String brokerName,
        final long brokerId,
        final String haServerAddr,
        final TopicConfigSerializeWrapper topicConfigWrapper,
        final List<String> filterServerList,
        final boolean oneway,
        final int timeoutMills,
        final boolean compressed) {
        final List<RegisterBrokerResult> registerBrokerResultList = 
			new CopyOnWriteArrayList<>(); // 实例化List集合
// 如果要想进行Broker注册，那么一定要提供有NameServer地址信息，那么此时通过RemotingClient获取
        List<String> nameServerAddressList = this.remotingClient.getNameServerAddressList();
        if (nameServerAddressList != null && nameServerAddressList.size() > 0) { // 有吗？
// 如果存在有NameServer，则构建头信息
            final RegisterBrokerRequestHeader requestHeader = new RegisterBrokerRequestHeader();
            requestHeader.setBrokerAddr(brokerAddr); // 设置Broker地址
            requestHeader.setBrokerId(brokerId); // 设置BrokerID
            requestHeader.setBrokerName(brokerName); // 设置Broker名称
            requestHeader.setClusterName(clusterName); // 设置集群名称
            requestHeader.setHaServerAddr(haServerAddr); // HA服务地址
            requestHeader.setCompressed(compressed); // 是否压缩
            RegisterBrokerBody requestBody = new RegisterBrokerBody(); // 请求数据主体部分
            requestBody.setTopicConfigSerializeWrapper(topicConfigWrapper); // 主题配置
            requestBody.setFilterServerList(filterServerList); 
// 在使用RocketMQ的时候所有的心跳数据都需要进行压缩处理
            final byte[] body = requestBody.encode(compressed); // 数据的压缩处理
            final int bodyCrc32 = UtilAll.crc32(body); // crc校验码
            requestHeader.setBodyCrc32(bodyCrc32);
// 在RocketMQ之中每一个NameServer保存的配置都是相同的，等待全部注册完成
            final CountDownLatch countDownLatch = new 
		CountDownLatch(nameServerAddressList.size());
            for (final String namesrvAddr : nameServerAddressList) {
                brokerOuterExecutor.execute(new Runnable() { 	// 注册处理
                    @Override
                    public void run() {
                        try {
                            RegisterBrokerResult result = registerBroker(namesrvAddr, oneway, 
			timeoutMills, requestHeader, body); // Broker注册
                            if (result != null) {
                                registerBrokerResultList.add(result); // 保存Broker注册结果
                            }
                            log.info("register broker[{}]to name server {} OK", brokerId, 
			namesrvAddr);
                        } catch (Exception e) {
                            log.warn("registerBroker Exception, {}", namesrvAddr, e);
                        } finally {
                            countDownLatch.countDown();
                        }
                    }
                });
            }
            try {
                countDownLatch.await(timeoutMills, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e) {}
        }
        return registerBrokerResultList;
    }
}


6、
private RegisterBrokerResult registerBroker( // 实现具体注册操作的工具方法
    final String namesrvAddr, // NameServer服务地址
    final boolean oneway, // oneway判断
    final int timeoutMills, // 超时时间
    final RegisterBrokerRequestHeader requestHeader, // 注册头信息
    final byte[] body // 压缩的注册数据
) throws RemotingCommandException, MQBrokerException, RemotingConnectException, RemotingSendRequestException, RemotingTimeoutException,
    InterruptedException {
    RemotingCommand request = RemotingCommand.createRequestCommand(
		RequestCode.REGISTER_BROKER, requestHeader); // 创建请求
    request.setBody(body); // 设置注册的主体
    if (oneway) {
        try {
            this.remotingClient.invokeOneway(namesrvAddr, request, timeoutMills);
        } catch (RemotingTooMuchRequestException e) {}
        return null;
    }
    RemotingCommand response = this.remotingClient.invokeSync(
	namesrvAddr, request, timeoutMills);
    assert response != null;
    switch (response.getCode()) {
        case ResponseCode.SUCCESS: { // 注册成功？
            RegisterBrokerResponseHeader responseHeader =
                (RegisterBrokerResponseHeader) response.decodeCommandCustomHeader(RegisterBrokerResponseHeader.class); // 响应头信息
            RegisterBrokerResult result = new RegisterBrokerResult(); // 注册结果
            result.setMasterAddr(responseHeader.getMasterAddr()); // Master地址
            result.setHaServerAddr(responseHeader.getHaServerAddr()); // HA服务列表
            if (response.getBody() != null) { // 响应主题不为空
                result.setKvTable(KVTable.decode(response.getBody(), KVTable.class));
            }
            return result;
        }
        default:
            break;
    }
    throw new MQBrokerException(response.getCode(), response.getRemark(), requestHeader == null ? null : requestHeader.getBrokerAddr());
}


7、
package org.apache.rocketmq.namesrv;
public class NamesrvController {
    public boolean initialize() {
        // 其他的代码暂时略…
        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() { // 扫描不活跃的Broker
                NamesrvController.this.routeInfoManager.scanNotActiveBroker(); 
            }
        }, 5, 10, TimeUnit.SECONDS);
        this.scheduledExecutorService.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {
                NamesrvController.this.kvConfigManager.printAllPeriodically();
            }
        }, 1, 10, TimeUnit.MINUTES);
        return true;
    }
}


8、
public void scanNotActiveBroker() {
// 扫描之前首先获得全部的Broker存活列表（每次都要更新的）
    Iterator<Entry<String, BrokerLiveInfo>> it = this.brokerLiveTable.entrySet().iterator();
    while (it.hasNext()) { // 列表迭代
        Entry<String, BrokerLiveInfo> next = it.next(); // 获取列表
    // 所有Broker会定期的发送配置的信息到NameServer之中，所以最后一次的配置更新的时间是会改变的
        long last = next.getValue().getLastUpdateTimestamp(); // 获取最后一次的更新时间戳
        if ((last + BROKER_CHANNEL_EXPIRED_TIME) < System.currentTimeMillis()) { // 超时吗？
            RemotingUtil.closeChannel(next.getValue().getChannel()); // 关闭通道
            it.remove(); // 移除Broker
            log.warn("The broker channel expired, {} {}ms", next.getKey(), BROKER_CHANNEL_EXPIRED_TIME);
            this.onChannelDestroy(next.getKey(), next.getValue().getChannel());
        }
    }
}


9、

