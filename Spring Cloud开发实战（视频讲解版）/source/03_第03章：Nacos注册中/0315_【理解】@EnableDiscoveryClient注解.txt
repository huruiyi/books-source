1、
@EnableDiscoveryClient

2、
package org.springframework.cloud.client.discovery;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import org.springframework.cloud.commons.util.SpringFactoryImportSelector;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.AnnotationAttributes;
import org.springframework.core.annotation.Order;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.Environment;
import org.springframework.core.env.MapPropertySource;
import org.springframework.core.type.AnnotationMetadata;
@Order(Ordered.LOWEST_PRECEDENCE - 100)
public class EnableDiscoveryClientImportSelector
      extends SpringFactoryImportSelector<EnableDiscoveryClient> {
   @Override
   public String[] selectImports(AnnotationMetadata metadata) {
      String[] imports = super.selectImports(metadata);
      // 获取拥有此注解的全部的配置属性的信息
      AnnotationAttributes attributes = AnnotationAttributes.fromMap(
            metadata.getAnnotationAttributes(getAnnotationClass().getName(), true));
      boolean autoRegister = attributes.getBoolean("autoRegister"); // 是否为自动注册
      if (autoRegister) { // 如果使用了自动注册
         List<String> importsList = new ArrayList<>(Arrays.asList(imports));
         importsList.add(
               "org.springframework.cloud.client.serviceregistry" +
                              ".AutoServiceRegistrationConfiguration");
         imports = importsList.toArray(new String[0]);
      }
      else { // 不使用自动注册处理
         Environment env = getEnvironment();// 获取系统环境自动配置选项
         if (ConfigurableEnvironment.class.isInstance(env)) {
            ConfigurableEnvironment configEnv = (ConfigurableEnvironment) env;
            LinkedHashMap<String, Object> map = new LinkedHashMap<>();
            map.put("spring.cloud.service-registry.auto-registration.enabled", false);
            MapPropertySource propertySource = new MapPropertySource(
                  "springCloudDiscoveryClient", map);
            configEnv.getPropertySources().addLast(propertySource);
         }
      }
      return imports;
   }
   @Override
   protected boolean isEnabled() {
      return getEnvironment().getProperty("spring.cloud.discovery.enabled",
            Boolean.class, Boolean.TRUE);
   }
   @Override
   protected boolean hasDefaultFactory() {
      return true;
   }
}


3、


4、


5、


6、


7、


8、


9、

