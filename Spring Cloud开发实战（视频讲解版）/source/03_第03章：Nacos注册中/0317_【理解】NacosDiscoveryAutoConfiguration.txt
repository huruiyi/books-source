1、
package com.alibaba.cloud.nacos.discovery;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
import com.alibaba.cloud.nacos.NacosServiceInstance;
import com.alibaba.nacos.api.exception.NacosException;
import com.alibaba.nacos.api.naming.pojo.Instance;
import com.alibaba.nacos.api.naming.pojo.ListView;
import org.springframework.cloud.client.ServiceInstance;
public class NacosServiceDiscovery {
   // 如果没有这些属性肯定无法找到Nacos服务地址，也无法找到正确的领域模型，最终肯定无法使用
   private NacosDiscoveryProperties discoveryProperties; // Nacos属性配置
   public NacosServiceDiscovery(NacosDiscoveryProperties discoveryProperties) {
      this.discoveryProperties = discoveryProperties;
   }
   // 根据Nacos地址和领域模型获取所有的服务实例
   public List<ServiceInstance> getInstances(String serviceId) throws NacosException {
      String group = discoveryProperties.getGroup();// 获取组
      List<Instance> instances = discoveryProperties.namingServiceInstance()
            .selectInstances(serviceId, group, true); // 根据命名空间、组名称、ID获取实例集合
      return hostToServiceInstanceList(instances, serviceId); // 主机转换
   }
   public List<String> getServices() throws NacosException { // 获取服务信息项
      String group = discoveryProperties.getGroup();
      ListView<String> services = discoveryProperties.namingServiceInstance()
            .getServicesOfServer(1, Integer.MAX_VALUE, group);
      return services.getData();
   }
   public static List<ServiceInstance> hostToServiceInstanceList(
         List<Instance> instances, String serviceId) { // 信息的转换
      List<ServiceInstance> result = new ArrayList<>(instances.size());
      for (Instance instance : instances) { // 获取集合中的每一个Instance
         ServiceInstance serviceInstance = hostToServiceInstance(instance, serviceId);
         if (serviceInstance != null) {
            result.add(serviceInstance);
         }
      }
      return result;
   }
   public static ServiceInstance hostToServiceInstance(Instance instance,
         String serviceId) { // 剥离
      if (instance == null || !instance.isEnabled() || !instance.isHealthy()) {
         return null;
      }
      NacosServiceInstance nacosServiceInstance = new NacosServiceInstance();
      nacosServiceInstance.setHost(instance.getIp());// 获取主机地址
      nacosServiceInstance.setPort(instance.getPort());// 获取端口号
      nacosServiceInstance.setServiceId(serviceId); // 获取服务ID
      Map<String, String> metadata = new HashMap<>();
      metadata.put("nacos.instanceId", instance.getInstanceId());// 实例ID
      metadata.put("nacos.weight", instance.getWeight() + ""); // 权重数据
      metadata.put("nacos.healthy", instance.isHealthy() + ""); // 健康信息
      metadata.put("nacos.cluster", instance.getClusterName() + ""); // 集群信息
      metadata.putAll(instance.getMetadata());// 元数据信息
      nacosServiceInstance.setMetadata(metadata);
      if (metadata.containsKey("secure")) {
         boolean secure = Boolean.parseBoolean(metadata.get("secure"));
         nacosServiceInstance.setSecure(secure);
      }
      return nacosServiceInstance;
   }
}


2、


3、


4、


5、


6、


7、


8、


9、

